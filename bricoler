#!/usr/bin/env lua54
-- Copyright (c) Mark Johnston <markj@FreeBSD.org>

local Argparse = require 'argparse'
local Posix = require 'posix'
local PL = require 'pl.import_into'()

local JobDB = require 'lib.bricoler.jobdb'
local Task = require 'lib.bricoler.task'
local TaskSched = require 'lib.bricoler.tasksched'
local Workdir = require 'lib.bricoler.workdir'
local Util = require 'lib.bricoler.util'

local function enumtasks(basepath)
    local tasks = {}
    Util.fsvisit(basepath, function (dir, file, attr)
        if not attr or attr.mode ~= "file" then
            -- "attr" can be nil if the file is a dangling symlink.
            return
        end

        local path = dir .. "/" .. file
        local name = path:match("^" .. basepath .. "/+(.+)%.task$")
        if name then
            assert(not tasks[name], "Duplicate task name '" .. name .. "'")
            tasks[name] = Util.realpath(path)
        else
            -- XXX-MJ simplistic, really we want to ignore certain files
            --Util.warn("Ignored file '" .. path .. "' in task directory")
        end
    end)
    return tasks
end

-- Find a path for this script and load task definitions from the relative dir.
local scriptdir = Util.dirname(arg[0])

local workdir = os.getenv("BRICOLER_WORKDIR") or (os.getenv("HOME") .. "/bricoler")
local taskdir = os.getenv("BRICOLER_TASKDIR") or Util.realpath(scriptdir .. "/tasks")
local tasks = enumtasks(taskdir)

local cmds = {}
local parser = Argparse("bricoler", "Manage and run tasks")
cmds.runtask = parser:command("runtask")
    :description("Run the specified task, or list available tasks")
cmds.runtask:flag("-s --show"):description("Print the computed task schedule")
cmds.runtask:option("-p --param")
    :description("Specify a parameter for one or more tasks, [task:]<param>=<value>")
    :count("*")
cmds.runtask:option("-j --maxjobs")
    :description("Maximum number of CPUs that a task may use")
    :default(Util.sysctl("hw.ncpu"))
cmds.runtask:option("-c --clean")
    :description("Clean the output directory for task <task>")
    :count("*")
cmds.runtask:flag("-C --clean-all")
    :description("Clean the work directory before running any tasks")
cmds.runtask:option("--workdir")
    :description("Work directory under which to run tasks, overrides ${BRICOLER_WORKDIR}")
    :default(workdir)
cmds.runtask:option("--taskdir")
    :description("Directory tree containing task definitions")
    :default(taskdir)
    :action(function(_, _, val)
        taskdir = Util.realpath(val)
        tasks = enumtasks(taskdir)
    end)
cmds.runtask:argument("task")
    :args("?") -- No name means, "print the list of available tasks."
    :description("Task name")
cmds.runtask:argument("job")
    :description("Job name")
    :default("")
    :args("?")

cmds.sql = parser:command("sql")
    :description("Drop into the SQLite3 shell for the database")
cmds.sql:option("--workdir")
    :description("Work directory under which to run tasks, overrides ${BRICOLER_WORKDIR}")
    :default(workdir)

local args = parser:parse()

local ctx = {
    maxjobs = tonumber(args.maxjobs),
    quiet = not Posix.unistd.isatty(Posix.unistd.STDOUT_FILENO),
    tmpdir = Util.realpath(args.workdir .. "/tmp"),
}
local env = require 'lib.bricoler.tasklib.env'(ctx)

Workdir.init(args.workdir, tasks)
local dbpath = "./jobs.db"

if args.runtask then
    local db = JobDB{
        path = dbpath,
        tasks = tasks,
    }
    if not args.task then
        local list = PL.tablex.keys(tasks)
        table.sort(list)
        for _, v in ipairs(list) do
            print(v)
        end
        os.exit(0)
    end
    local sched = TaskSched{
        env = env,
        job = args.job,
        jobdb = db,
        params = args.param,
        universe = tasks,
        target = args.task,
    }
    if args.show then
        sched:print()
    else
        local clean = args.clean_all and {} or #args.clean > 0 and args.clean or nil
        if clean then
            clean = PL.tablex.makeset(clean)
        end
        sched:run(clean, ctx)
    end
elseif args.sql then
    os.execute("sqlite3 " .. dbpath)
end
