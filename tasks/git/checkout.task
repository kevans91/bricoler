-- Copyright (c) Mark Johnston <markj@FreeBSD.org>

Descr = [[
Make a git repository available by one of several methods:
- clone a remote repository,
- update an existing clone,
- create a symlink to a path
In the last case we simply assume that the path is a git repository.
]]

Params = {
    repo = {
        descr = "URL for the git repository to check out, ignored after initial clone",
        required = true,
    },
    branch = {
        descr = "git branch to check out, ignored after initial clone"
    },
    clone = {
        descr = "Whether to clone the repository or make a symlink to an existing repository",
        default = true
    },
    remote = {
        descr = "Name to use for remote repository",
        default = "origin",
    },
}

Outputs = {
    checkout = {
        descr = "A copy of the checked out repository",
    }
}

function Run(_, params, _, outputs)
    local checkout = outputs.checkout
    local repo = params.repo
    local remote = params.remote

    if params.clone then
        local attr = fs.attributes(checkout)
        if attr and fs.attributes(checkout .. "/.git") then
            execp{"git", "-C", checkout, "pull", "--rebase", remote}
        elseif params.branch then
            execp{"git", "clone", "--depth=1", "--origin", remote,
                  "--branch", params.branch, repo, checkout}
        else
            execp{"git", "clone", "--depth=1", "-o", remote, repo, checkout}
        end
    else
        -- The repo URI must be a filesystem path.
        local uri = repo:match("^file://(/.*)$")
        if not uri then
            uri = repo:match("^/.*")
            if not uri then
                error(("Cannot link non-local repository '%s'"):format(repo))
            end
        end

        -- We should in principle check that this path corresponds to a git
        -- repository, but we want to be flexible in the case where the user
        -- wants to use a subtree instead.
        execp{"ln", "-f", "-s", uri, checkout}
    end
end

-- vi: ft=lua
