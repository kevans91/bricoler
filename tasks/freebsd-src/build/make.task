-- Copyright (c) Mark Johnston <markj@FreeBSD.org>

Descr = [[
Make a FreeBSD src build target, such as buildworld.
]]

Params = {
    make_targets = {
        descr = "Make(1) targets, separated by spaces, e.g., 'buildworld buildkernel'",
        required = true,
    },
    make_env = {
        descr = "Environment variables to pass to bmake(1)",
        default = "",
    },
    make_args = {
        descr = "Command-line flags to pass to bmake(1)",
        default = "",
    },

    -- The parameters below can all be specified using make_args and so are
    -- somewhat redundant, but fine-grained parameters are more descriptive and
    -- having them makes it easier to override specific options.
    clean = {
        descr = "Force a clean build of the target",
        default = false,
    },
    noroot = {
        descr = "Run install targets in rootless mode, i.e., add -DNO_ROOT",
        default = true,
    },
    kernconf = {
        descr = "Kernel configuration to use for {build,install}kernel targets"
    },
    kernconfdir = {
        descr = "Directory containing the kernel configuration file",
    },
    quiet = {
        descr = "Run bmake(1) with -s",
        default = true,
    },
    toolchain = {
        descr = "Cross toolchain to use for the build"
    },
    srcconf = {
        descr = "Path to the src.conf file to use for the build",
        default = "/dev/null",
    },
    makeconf = {
        descr = "Path to the make.conf file to use for the build",
        default = "/dev/null",
    },
    target = {
        descr = "The TARGET/TARGET_ARCH pair to use for the build",
    }
}

Inputs = {
    src = {
        task = "git/checkout",
        params = {
            repo = "https://github.com/freebsd/freebsd-src",
            branch = "main",
        }
    }
}

Outputs = {
    objdir = {
        descr = "A directory containing the unstaged output of the build."
    },
    stagedir = {
        descr = "A directory containing output from install targets.",
    },
    metalog = {
        descr = "The name of the mtree file located at the root of stagedir."
    },
}

function Run(ctx, params, inputs, outputs)
    local cwd = pwd()

    -- Build up the make(1) environment.
    local objdirprefix = cwd .. "/" .. outputs.objdir
    local env = "MAKEOBJDIRPREFIX=" .. objdirprefix
    if #params.make_env > 0 then
        env = env .. " " .. params.make_env
    end

    local target, target_arch
    if params.target then
        target, target_arch = params.target:match("^(%w+)/(%w+)$")
        if not target then
            target = params.target
        end
    end

    -- Build up the make(1) parameters.  All of these could be set directly via
    -- make_args, but all else being equal it's better to have some semantic
    -- understanding of what the user is asking for.
    for _, v in ipairs({
        {"KERNCONF=", params.kernconf},
        {"KERNCONFDIR=", params.kernconfdir},
        {"CROSS_TOOLCHAIN=", params.toolchain},
        {"-DNO_ROOT", params.noroot},
        {"SRCCONF=", params.srcconf},
        {"__MAKE_CONF=", params.makeconf},
        {"DESTDIR=", cwd .. "/" .. outputs.stagedir},
        {"WITHOUT_CLEAN=", not params.clean},
        {"TARGET=", target},
        {"TARGET_ARCH=", target_arch},
    }) do
        if v[2] then
            params.make_args = params.make_args .. " " .. v[1] ..
                               (type(v[2]) == "string" and v[1]:match("=$") and v[2] or "")
        end
    end

    makepath(outputs.stagedir)

    if params.quiet then
        params.make_args = params.make_args .. " -s"
    end

    -- Build each target using a separate make invocation.  This might not be
    -- necessary but I think the top-level target ordering is underspecified
    -- so let's just play it safe.
    for target in params.make_targets:gmatch("([^%s]+)") do
        system(("%s make -C %s -j %d %s %s")
               :format(env,
                       inputs.src.checkout,
                       ctx.maxjobs,
                       params.make_args,
                       target))
    end

    if params.noroot then
        -- XXX-MJ this is wrong if METALOG is overridden in make_args.
        -- XXX-MJ could do something like 'make -f /dev/null -VMETALOG params.make_args' to find it.
        outputs.metalog = "METALOG"
    end
end

-- vi: ft=lua
