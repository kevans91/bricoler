-- Copyright (c) 2022 Mark Johnston <markj@FreeBSD.org>

Descr = [[
Create a FreeBSD VM image.
]]

Params = {
    target = {
        descr = "Target platform",
        default = uname_m() .. "/" .. uname_p(),
        valid = {"amd64", "amd64/amd64", "arm64", "arm64/aarch64", "i386", "i386/i386"},
    },
    image_type = {
        descr = "File format of the output VM image",
        default = "raw",
        valid = {"raw"},
    },
    image_fs = {
        descr = "Filesystem used for the root of the filesystem",
        default = "ufs",
        valid = {"ufs"},
    },
    image_size = {
        descr = "Filesystem image size",
    },
    ssh_users = {
        descr = "List of users for which to install SSH keys",
        valid = {"root"},
    },
    pkgs = {
        descr = "List of packages to install upon first boot",
    }
}

Inputs = {
    build = {
        task = "freebsd-src/build/make",
        params = {
            make_targets = "buildworld buildkernel installworld installkernel distribution",
            noroot = true,
            target = function (params) return params.target end
        },
    },
}

Outputs = {
    image_file = {
        descr = "Output VM disk image file",
    },
    ssh_keys = {
        descr = "Directory containing SSH private keys, id_ed25519_<user>"
    },
}

function Run(_, params, inputs, outputs)
    -- XXX-MJ need more formality in the way that outputs are defined.
    local keydir = realpath(".") .. "/" .. outputs.ssh_keys
    local imagedir = realpath(".") .. "/" .. outputs.image_file
    system("mkdir -p " .. keydir)
    system("mkdir -p " .. imagedir)

    -- An mtree manifest is always interpreted relative to the cwd.
    cd(inputs.build.stagedir)

    if params.ssh_users then
        local keypath = "./root/.ssh/id_ed25519_root"
        local keygen = "ssh-keygen -t ed25519 -N \"\" -f " .. keypath
        -- XXX-MJ yuck
        system("mkdir -p " .. dirname(keypath))
        system("yes | " .. keygen)
        system("cat " .. keypath .. ".pub > ./root/.ssh/authorized_keys")
        system("cp " .. keypath .. " " .. keydir)
        system("echo ./root type=dir >> METALOG")
        system("echo ./root/.ssh type=dir uname=root gname=wheel mode=0700 >> METALOG")
        system("echo ./root/.ssh/authorized_keys type=file uname=root gname=wheel mode=0755 >> METALOG")
    end

    if params.pkgs then
        system("mkdir -p ./tmp/pkg")
        -- XXX-MJ ABI is hard-coded
        writefile("./tmp/pkg/FreeBSD.conf", [[
FreeBSD: {
    url: "pkg+http://pkg.FreeBSD.org/FreeBSD:14:amd64/latest",
    mirror_type: "srv",
    signature_type: "fingerprints",
    fingerprints: "/usr/share/keys/pkg",
    enabled: yes
}
]])

        -- XXX-MJ ABI is hard-coded
        local pkgprefix = "INSTALL_AS_USER=1 pkg " ..
                          "-o ASSUME_ALWAYS_YES=true " ..
                          "-o PKG_CACHEDIR=./var/cache/pkg " ..
                          "-o REPOS_DIR=./tmp/pkg " ..
                          "-o PKG_DBDIR=./var/db/pkg " ..
                          "-o ABI=FreeBSD:14:amd64 "
        system(pkgprefix .. "update")
        system(pkgprefix .. "fetch --dependencies -o ./root/bootstrap pkg")
        system(pkgprefix .. "fetch --dependencies -o ./root/pkg " .. params.pkgs)
        system("pkg repo ./root/pkg")

        system("echo ./root/pkg type=dir uname=root gname=wheel mode=0750 >> METALOG")
        system("echo ./root/pkg/All type=dir uname=root gname=wheel mode=0750 >> METALOG")
        system("echo ./root/bootstrap type=dir uname=root gname=wheel mode=0750 >> METALOG")
        system("echo ./root/bootstrap/All type=dir uname=root gname=wheel mode=0750 >> METALOG")

        -- XXX-MJ this hard-codes the subdirectories
        system([[
for file in $(find ./root/pkg -type f); do
    echo ./${file} type=file uname=root gname=wheel mode=0640 >> METALOG
done
for file in $(find ./root/bootstrap -type f); do
    echo ./${file} type=file uname=root gname=wheel mode=0640 >> METALOG
done
for file in $(find ./var/cache/pkg -type f); do
    echo ./${file} type=file uname=root gname=wheel mode=0640 >> METALOG
done
]])

        system("mkdir -p ./usr/local/etc/pkg/repos")
        writefile("./usr/local/etc/pkg/repos/local.conf", [[
local: {
    url: "file:///root/pkg",
}
]])
        system("echo ./usr/local/etc type=dir uname=root gname=wheel mode=0744 >> METALOG")
        system("echo ./usr/local/etc/pkg type=dir uname=root gname=wheel mode=0744 >> METALOG")
        system("echo ./usr/local/etc/pkg/repos type=dir uname=root gname=wheel mode=0744 >> METALOG")
        system("echo ./usr/local/etc/pkg/repos/local.conf type=file uname=root gname=wheel mode=0644 >> METALOG")
    end

    writefile("./etc/fstab", [[
/dev/gpt/rootfs /       ufs     rw      0       0
/dev/gpt/swap   none    swap    sw      0       0
none            /dev/fd fdescfs rw      0       0
]])
    system("echo ./etc/fstab type=file uname=root gname=wheel mode=0644 >> METALOG")

    writefile("./firstboot", "")
    system("echo ./firstboot type=file uname=root gname=wheel mode=0644 >> METALOG")

    writefile("./boot/loader.conf", [[
console="comconsole"
autoboot_delay=2
]])
    system("echo ./boot/loader.conf type=file uname=root gname=wheel mode=0644 >> METALOG")

    writefile("./etc/rc.conf", [[
hostname="freebsd-vm"
growfs_enable="YES"
]])
    system("echo ./etc/rc.conf type=file uname=root gname=wheel mode=0644 >> METALOG")

    local efibins = {
        ["amd64/amd64"] = "bootx64.efi",
        ["arm64/aarch64"] = "bootaa64.efi",
        ["i386/i386"] = "bootia32.efi",
    }
    local efibin = efibins[params.target]

    -- Create the ESP.
    system("mkdir -p ./boot/efi/EFI/BOOT")
    system("cp -f ./boot/loader.efi ./boot/efi/EFI/BOOT/" .. efibin)
    local cmd = "makefs -t msdos -o fat_type=16 -o sectors_per_cluster=1 -o volume_label=EFISYS -s 4096k " ..
                imagedir .. "/vm.efi ./boot/efi"
    system(cmd)

    -- Create the main filesystem image.
    if params.image_fs == "ufs" then
        -- XXX-MJ METALOG should be inputs.build.metalog
        cmd = "makefs -Z -D -t ffs -o softupdates=1 -o version=2 "
        if params.image_size then
            cmd = cmd .. "-s " .. params.image_size .. " "
        end
        cmd = cmd .. imagedir .. "/image.fs METALOG"
        system(cmd)
    end

    -- Put them all together.  The main filesystem comes last in the partition
    -- table so that it can be expanded.
    -- XXX-MJ gptboot is only needed on x86
    cmd = "mkimg -s gpt -f raw -S 512 -b ./boot/pmbr -p freebsd-boot/bootfs:=./boot/gptboot -p efi:=" ..
          imagedir .. "/vm.efi -p freebsd-swap/swap::8G -p freebsd-ufs/rootfs:=" ..
          imagedir .. "/image.fs -o " .. imagedir .. "/image.raw"
    system(cmd)

    outputs.image_file = imagedir .. "/image.raw"
end

-- vi:ft=lua
