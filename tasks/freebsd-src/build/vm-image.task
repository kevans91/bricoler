-- Copyright (c) Mark Johnston <markj@FreeBSD.org>

Descr = [[
Create a FreeBSD VM image.
]]

Params = {
    target = {
        descr = "Target platform",
        default = uname_m() .. "/" .. uname_p(),
        valid = {"amd64/amd64", "arm/armv7", "arm64/aarch64", "i386/i386", "riscv/riscv64"},
    },
    image_type = {
        descr = "File format of the output VM image",
        default = "raw",
        valid = {"raw"},
    },
    image_fs = {
        descr = "Filesystem used for the output VM image",
        default = "ufs",
        valid = {"ufs"},
    },
    image_size = {
        descr = "Output filesystem image size",
    },
    ssh_users = {
        descr = "List of users for which to install SSH keys",
        valid = {"root"},
    },
    pkgs = {
        -- XXX-MJ want some way to specify the source
        descr = "List of packages to install upon first boot",
    },
    pkgabi = {
        -- XXX-MJ should be derived from src tree and target
        descr = "pkg(8) ABI",
        default = "FreeBSD:14:amd64",
    },
}

Inputs = {
    build = {
        task = "freebsd-src/build/make",
        params = {
            make_targets = "buildworld buildkernel installworld installkernel distribution",
            noroot = true,
            target = function (params) return params.target end
        },
    },
}

Outputs = {
    image_file = {
        descr = "Output VM disk image file",
    },
    ssh_keys = {
        descr = "Directory containing SSH private keys, id_ed25519_<user>"
    },
}

function Run(_, params, inputs, outputs)
    -- XXX-MJ need more formality in the way that outputs are defined.
    local keydir = realpath(".") .. "/" .. outputs.ssh_keys
    local imagedir = realpath(".") .. "/" .. outputs.image_file
    mkdirp(keydir)
    mkdirp(imagedir)

    -- XXX-MJ this should avoid modifying the generated mtree and instead
    -- make a copy.  Similarly, added files should be provided as an additional
    -- overlay directory.
    local mtree = MTree{
        path = "./METALOG",
        defaults = {
            file = { uname = "root", gname = "wheel", mode = "0644" },
            dir = { uname = "root", gname = "wheel", mode = "0755" },
        }
    }

    -- An mtree manifest is always interpreted relative to the cwd.
    cd(inputs.build.stagedir)

    if params.ssh_users then
        local keypath = "./root/.ssh/id_ed25519_root"
        local keygen = "ssh-keygen -t ed25519 -N \"\" -f " .. keypath

        -- XXX-MJ yuck
        mkdirp(dirname(keypath))
        system("yes | " .. keygen)
        system("cat " .. keypath .. ".pub > ./root/.ssh/authorized_keys")
        system("cp " .. keypath .. " " .. keydir)

        system("sed -i '' 's/^#PermitRootLogin no$/PermitRootLogin yes/' ./etc/ssh/sshd_config")

        -- XXX-MJ can infer the type
        mtree:add("./root", {type = "dir"})
        mtree:add("./root/.ssh", {type = "dir", mode = "0700"})
        mtree:add("./root/.ssh/authorized_keys", {type = "file"})
    end

    if params.pkgs then
        -- Create a local pkg repository by fetching packages from some
        -- source (currently hard-coded to pkg.f.o).
        mkdirp("tmp/pkg")
        writefile("./tmp/pkg/FreeBSD.conf", ([[
FreeBSD: {
    url: "pkg+http://pkg.FreeBSD.org/%s/latest",
    mirror_type: "srv",
    signature_type: "fingerprints",
    fingerprints: "/usr/share/keys/pkg",
    enabled: yes
}
]]):format(params.pkgabi))

        local pkgprefix = ("INSTALL_AS_USER=1 pkg " ..
                           "-o ASSUME_ALWAYS_YES=true " ..
                           "-o PKG_CACHEDIR=./var/cache/pkg " ..
                           "-o REPOS_DIR=./tmp/pkg " ..
                           "-o PKG_DBDIR=./var/db/pkg " ..
                           "-o ABI=%s ")
                          :format(params.pkgabi)
        system(pkgprefix .. "update")
        system(pkgprefix .. "fetch --dependencies -o ./root/bootstrap pkg")
        system(pkgprefix .. "fetch --dependencies -o ./root/pkg " .. params.pkgs)
        system("pkg repo ./root/pkg")

        mtree:add("./root/pkg", {type = "dir"})
        mtree:add("./root/pkg/All", {type = "dir"})
        mtree:add("./root/bootstrap", {type = "dir"})
        mtree:add("./root/bootstrap/All", {type = "dir"})

        -- XXX-MJ this hard-codes the subdirectories
        system([[
for file in $(find ./root/pkg -type f); do
    echo ${file} type=file uname=root gname=wheel mode=0640 >> METALOG
done
for file in $(find ./root/bootstrap -type f); do
    echo ${file} type=file uname=root gname=wheel mode=0640 >> METALOG
done
for file in $(find ./var/cache/pkg -type f); do
    echo ${file} type=file uname=root gname=wheel mode=0640 >> METALOG
done
]])

        mkdirp("usr/local/etc/pkg/repos")
        mtree:add("./usr/local/etc", {type = "dir"})
        mtree:add("./usr/local/etc/pkg", {type = "dir"})
        mtree:add("./usr/local/etc/pkg/repos", {type = "dir"})
        mtree:add("./usr/local/etc/pkg/repos/local.conf", {type = "file"}, [[
local: {
    url: "file:///root/pkg",
}
]])

        -- XXX-MJ this script should really be an rc script
        mtree:add("./etc/rc.local", {type = "file"}, [[
set -x

export PATH=${PATH}:/usr/local/sbin:/usr/local/bin

if [ -f /firstboot -a -d /root/bootstrap/All ]; then
    # Older version of pkg(7) don't use basename().
    cd /root/bootstrap/All

    pkg add *
    pkg install -y -r local -g '*'
    if [ $? -ne 0 ]; then
        # There is some pkg bug that requires us to run this twice.
        # Otherwise it'll fail when trying to update the upstream repo.
        pkg install -y -r local -g '*'
    fi
fi
]])
    end

    mtree:add("./etc/fstab", {type = "file"}, [[
/dev/gpt/rootfs /       ufs     rw      0       0
/dev/gpt/swap   none    swap    sw      0       0
none            /dev/fd fdescfs rw      0       0
]])
    mtree:add("./firstboot", {type = "file"}, "")
    mtree:add("./boot/loader.conf", {type = "file"}, [[
console="comconsole"
autoboot_delay=2
]])
    mtree:add("./etc/rc.conf", {type = "file"}, [[
hostname="freebsd-vm"
ifconfig_DEFAULT="DHCP"

growfs_enable="YES"
sshd_enable="YES"
]])

    -- At this point we're finished writing files into the image.
    mtree:write()

    local efibins = {
        ["amd64/amd64"] = "bootx64.efi",
        ["arm/armv7"] = "bootarm.efi",
        ["arm64/aarch64"] = "bootaa64.efi",
        ["i386/i386"] = "bootia32.efi",
        ["riscv/riscv64"] = "bootriscv64.efi",
    }
    local efibin = efibins[params.target]

    -- Create the ESP.
    mkdirp("boot/efi/EFI/BOOT")
    system(("cp -f ./boot/loader.efi ./boot/efi/EFI/BOOT/%s"):format(efibin))
    system(("makefs -t msdos -o fat_type=16 -o sectors_per_cluster=1" ..
            " -o volume_label=EFISYS -s 4096k %s/vm.efi ./boot/efi")
           :format(imagedir))

    -- Create the main filesystem image.
    if params.image_fs == "ufs" then
        -- XXX-MJ METALOG should be inputs.build.metalog
        local cmd = "makefs -Z -D -t ffs -o softupdates=1 -o version=2 "
        if params.image_size then
            cmd = cmd .. "-s " .. params.image_size .. " "
        end
        cmd = cmd .. imagedir .. "/image.fs METALOG"
        system(cmd)
    end

    -- Put them all together.  The main filesystem comes last in the partition
    -- table so that it can be expanded.
    local cmd = "mkimg -s gpt -f raw -S 512 "
    if params.target == "amd64/amd64" or params == "i386/i386" then
        cmd = cmd .. "-b ./boot/pmbr -p freebsd-boot/bootfs:=./boot/gptboot "
    end
    cmd = cmd ..  "-p efi:=" ..
          imagedir .. "/vm.efi -p freebsd-swap/swap::8G -p freebsd-ufs/rootfs:=" ..
          imagedir .. "/image.fs -o " .. imagedir .. "/image.raw"
    system(cmd)

    outputs.image_file = imagedir .. "/image.raw"
end

-- vi:ft=lua
